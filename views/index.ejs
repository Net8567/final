<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wagenrad</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        main {
            flex: 1;  /* Allow the main content area to grow and fill space */
            margin-bottom: 4rem;
        }


        header {
            background-color: #222;
            color: white;
            text-align: center;
            padding: 1rem;
        }

        .carousel {
            position: relative;
            max-width: 600px;
            margin: 2rem auto;
            overflow: hidden;
        }

        .carousel-container {
            display: flex;
            transition: transform 0.5s ease-in-out;
        }

        .carousel-item {
            min-width: 100%;
            text-align: center;
        }

        .carousel-item img {
            width: 100%;
            height: auto;
        }

        .carousel-item p {
            margin: 0.5rem 0;
        }

        .carousel-buttons {
            position: absolute;
            top: 50%;
            width: 100%;
            display: flex;
            justify-content: space-between;
            transform: translateY(-50%);
        }

        .carousel-buttons button {
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            cursor: pointer;
        }

        .actions {
            text-align: center;
            margin: 2rem 0;
        }

        button {
            margin: 0.5rem;
            padding: 0.5rem 1rem;
            cursor: pointer;
        }

        .listings {
            margin: 2rem;
        }

        #popup-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        footer {
            background-color: #222;
            color: white;
            text-align: center;
            padding: 0.5rem 1rem;
            position: fixed;
            bottom: 0;
            width: 100%;
        }

        .logout-button {
            background-color: #ff4d4d;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            cursor: pointer;
            font-size: 1rem;
            margin-bottom: 1rem;
        }

        /* Styles for the exchange rate display */
        .exchange-rate {
            text-align: center;
            margin: 1rem auto;
            padding: 1rem;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
            max-width: 600px;
            font-size: 1.2rem;
            color: #333;
        }
        .exchange-rate span {
            font-weight: bold;
        }
    </style>
</head>
<body>
<header>
    <h1>Wagenrad</h1>
    <p>Golikov Nikita. BDA-2303</p> <!-- Moved footer content to header -->
    <button class="logout-button" id="logout-btn">Log Out</button> <!-- Moved logout button to header -->
</header>

<main>
    <section class="carousel">
        <div class="carousel-container" id="carousel-container">
            <!-- Carousel items will be injected dynamically -->
        </div>
        <div class="carousel-buttons">
            <button id="prev-btn">&lt;</button>
            <button id="next-btn">&gt;</button>
        </div>
    </section>

    <div id="car-actions">
        <button id="create-car">Create Car</button>
        <button id="update-car">Update Car (Admins Only)</button>
        <button id="delete-car">Delete Car (Admins Only)</button>
    </div>
    <div id="error-message" style="color: red;"></div>

    <section class="listings">
        <h3>Car Listings</h3>
        <ul id="listing-container">
            <!-- Placeholder for listings -->
        </ul>
    </section>
</main>

<div id="popup-modal">
    <div class="modal-content">
        <form id="car-form">
            <label for="car-photo">Car Photo:</label>
            <input type="file" id="car-photo" accept="image/*" required>
            <label for="car-mileage">Mileage (km):</label>
            <input type="number" id="car-mileage" required>
            <label for="car-price">Price ($):</label>
            <input type="number" id="car-price" required>
            <button type="submit">Save</button>
            <button type="button" id="close-modal">Cancel</button>
        </form>
    </div>
</div>
<section class="exchange-rate">
    <p>Exchange Rate: <span id="exchange-rate">Loading...</span></p>
    <p>1 USD = <span id="usd-to-kzt"></span> KZT</p>
</section>
<div id="car-details">
    <h2>Enter Car Details</h2>
    <form id="car-details-form">
        <label for="make">Make:</label>
        <input type="text" id="make" required>

        <label for="model">Model:</label>
        <input type="text" id="model" required>

        <label for="year">Year:</label>
        <input type="number" id="year" required>

        <button type="submit">Get Safety Rating</button>
    </form>
</div>

<div id="safety-rating">
    <!-- Safety Rating will be shown here -->
</div>

<script>
    document.addEventListener("DOMContentLoaded", async () => {
        // Exchange rate API configuration
        const apiKey = 'cb15b3225474aa4cc20fef2c'; // Replace with your actual API key
        const apiUrl = `https://v6.exchangerate-api.com/v6/${apiKey}/latest/USD`;

        const exchangeRateElement = document.getElementById('exchange-rate');
        const usdToKztElement = document.getElementById('usd-to-kzt');

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) throw new Error('Failed to fetch exchange rates');

            const data = await response.json();
            const usdToKzt = data.conversion_rates.KZT;

            // Update the UI
            exchangeRateElement.textContent = `USD to KZT Conversion Rate`;
            usdToKztElement.textContent = usdToKzt.toFixed(2);
        } catch (error) {
            console.error('Error fetching exchange rate:', error);
            exchangeRateElement.textContent = 'Failed to load exchange rates';
        }

        const form = document.getElementById("car-details-form");
        const safetyRatingDiv = document.getElementById("safety-rating");

        form.addEventListener("submit", async (event) => {
            event.preventDefault();

            const make = document.getElementById("make").value;
            const model = document.getElementById("model").value;
            const year = document.getElementById("year").value;

            // Fetch safety rating from NHTSA API
            const safetyRating = await getSafetyRating(make, model, year);

            // Display the safety rating
            if (safetyRating) {
                safetyRatingDiv.innerHTML = `
                <h3>Safety Rating for ${year} ${make} ${model}</h3>
                <p>${safetyRating}</p>
            `;
            } else {
                safetyRatingDiv.innerHTML = "<p>No safety ratings found.</p>";
            }
        });

        // Fetch safety rating based on make, model, and year
        async function getSafetyRating(make, model, year) {
            const apiKey = "your_api_key_here";  // If the NHTSA API requires an API key

            const url = `const response = await fetch(`https://api.nhtsa.gov/safety-ratings?make=${make}&model=${model}&year=${year}&apiKey=YOUR_API_KEY`);`;

            try {
                const response = await fetch(url);
                const data = await response.json();

                if (data.Results && data.Results.length > 0) {
                    // Assuming the first result has the required rating
                    const safetyData = data.Results[0];
                    return `Overall Safety Rating: ${safetyData.VehicleRating}`;
                } else {
                    return null; // No results found
                }
            } catch (error) {
                console.error("Error fetching safety rating:", error);
                return null; // Return null if there's an error
            }
            }
        // Original script code remains unchanged from here
        const cars = [
            {photo: "/images/IMG_3650.jpeg", price: 1000, mileage: 1000000},
            {photo: "/images/IMG_4325.jpeg", price: 30000, mileage: 10000},
            {photo: "/images/IMG_4869.jpeg", price: 20000, mileage: 300000},
        ];

        const carouselContainer = document.getElementById("carousel-container");
        const prevBtn = document.getElementById("prev-btn");
        const nextBtn = document.getElementById("next-btn");
        const errorMessage = document.getElementById("error-message");
        const updateButton = document.getElementById("update-car");
        const deleteButton = document.getElementById("delete-car");

        let currentIndex = 0;

        // Load carousel items
        const loadCarousel = () => {
            cars.forEach((car) => {
                const div = document.createElement("div");
                div.classList.add("carousel-item");
                div.innerHTML = `
                        <img src="${car.photo}" alt="Car">
                        <p>Price: $${car.price}</p>
                        <p>Mileage: ${car.mileage} km</p>
                    `;
                carouselContainer.appendChild(div);
            });
        };

        let userType = 'user'; // Default to regular user
        const fetchUserType = async () => {
            try {
                const response = await fetch('/auth/user-type'); // Assuming this endpoint exists
                if (response.ok) {
                    const data = await response.json();
                    userType = data.type; // Example: { type: 'admin' }
                }
            } catch (err) {
                console.error('Error fetching user type:', err);
            }
        };

        const logoutButton = document.getElementById("logout-btn");

        // Event listener for the log-out button
        logoutButton.addEventListener("click", () => {
            // Clear local storage/session storage/cookies if needed
            localStorage.removeItem("user-token");  // Example: remove the user token
            sessionStorage.clear();                 // Example: clear session storage

            // Alternatively, you can redirect to a log-out route on the backend
            window.location.href = "/auth/signin";       // Redirect to log out route (adjust as needed)

            // You could also show a confirmation message before logging out if needed
            alert("You have been logged out.");
        });

        fetchUserType();

        // Admin-only action: Update car
        updateButton.addEventListener('click', () => {
            if (userType !== 'admin') {
                errorMessage.textContent = 'Only admins can update car listings!';
                return;
            }
            // Redirect to update form (or handle update logic here)
            window.location.href = '/admin/update-car';
        });

        // Admin-only action: Delete car
        deleteButton.addEventListener('click', () => {
            if (userType !== 'admin') {
                errorMessage.textContent = 'Only admins can delete car listings!';
                return;
            }
            // Redirect to delete page (or handle delete logic here)
            window.location.href = '/admin/delete-car';
        });

        // Update carousel position
        const updateCarousel = () => {
            const offset = -currentIndex * 100;
            carouselContainer.style.transform = `translateX(${offset}%)`;
        };

        // Event listeners for navigation
        prevBtn.addEventListener("click", () => {
            currentIndex = (currentIndex - 1 + cars.length) % cars.length;
            updateCarousel();
        });

        nextBtn.addEventListener("click", () => {
            currentIndex = (currentIndex + 1) % cars.length;
            updateCarousel();
        });

        // Initialize carousel
        loadCarousel();
        updateCarousel();

        // Popup modal functionality
        const createBtn = document.getElementById("create-car");  // Fixed the ID here
        const popupModal = document.getElementById("popup-modal");
        const closeModal = document.getElementById("close-modal");
        const carForm = document.getElementById("car-form");
        const listingContainer = document.getElementById("listing-container");

        // Open the modal when clicking "Create"
        createBtn.addEventListener("click", () => {
            popupModal.style.display = "flex";
        });

        // Close the modal when clicking "Cancel" or outside the modal
        closeModal.addEventListener("click", () => {
            popupModal.style.display = "none";
        });

        window.addEventListener("click", (event) => {
            if (event.target === popupModal) {
                popupModal.style.display = "none";
            }
        });

        // Handle form submission
        carForm.addEventListener("submit", (event) => {
            event.preventDefault();

            // Get input values
            const photo = document.getElementById("car-photo").files[0];
            const mileage = document.getElementById("car-mileage").value;
            const price = document.getElementById("car-price").value;

            // Validate inputs
            if (!photo || !mileage || !price) {
                alert("All fields are required.");
                return;
            }

            // Create a new car listing
            const reader = new FileReader();
            reader.onload = (e) => {
                const newCar = {
                    photo: e.target.result,
                    mileage: parseInt(mileage, 10),
                    price: parseFloat(price),
                };

                cars.push(newCar);

                // Update listings
                const li = document.createElement("li");
                li.innerHTML = `
                <img src="${newCar.photo}" alt="Car" style="width: 100px; height: auto;">
                <p>Price: $${newCar.price}</p>
                <p>Mileage: ${newCar.mileage} km</p>
                `;
                listingContainer.appendChild(li);

                // Close the modal and reset form
                popupModal.style.display = "none";
                carForm.reset();

                // Optionally, reload the carousel
                carouselContainer.innerHTML = "";
                loadCarousel();
                updateCarousel();
            };

            reader.readAsDataURL(photo);
        });
    });
</script>
</body>
</html>